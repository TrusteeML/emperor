{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/core/FactoryMaker.js","src/core/events/CoreEvents.js","src/core/events/Events.js","src/core/events/EventsBase.js","src/streaming/MediaPlayerEvents.js","src/streaming/metrics/MetricsReporting.js","src/streaming/metrics/MetricsReportingEvents.js","src/streaming/metrics/controllers/MetricsCollectionController.js","src/streaming/metrics/controllers/MetricsController.js","src/streaming/metrics/controllers/MetricsHandlersController.js","src/streaming/metrics/controllers/RangeController.js","src/streaming/metrics/controllers/ReportingController.js","src/streaming/metrics/metrics/MetricsHandlerFactory.js","src/streaming/metrics/metrics/handlers/BufferLevelHandler.js","src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js","src/streaming/metrics/metrics/handlers/GenericMetricHandler.js","src/streaming/metrics/metrics/handlers/HttpListHandler.js","src/streaming/metrics/reporting/ReportingFactory.js","src/streaming/metrics/reporting/reporters/DVBReporting.js","src/streaming/metrics/utils/DVBErrorsTranslator.js","src/streaming/metrics/utils/HandlerHelpers.js","src/streaming/metrics/utils/ManifestParsing.js","src/streaming/metrics/utils/MetricSerialiser.js","src/streaming/metrics/utils/RNG.js","src/streaming/metrics/vo/DVBErrors.js","src/streaming/metrics/vo/Metrics.js","src/streaming/metrics/vo/Range.js","src/streaming/metrics/vo/Reporting.js","src/streaming/utils/CustomTimeRanges.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","MetricsReporting","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","FactoryMaker","extend","name","childInstance","override","context","extensionContext","getExtensionContext","instance","getSingletonInstance","className","singletonContexts","obj","setSingletonInstance","push","getClassFactory","classConstructor","undefined","create","merge","__dashjs_factory_name","apply","arguments","getSingletonFactory","getInstance","args","extensionObject","extension","factory","parent","prop","hasOwnProperty","extensions","forEach","_EventsBase2","_interopRequireDefault","CoreEvents","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","AST_IN_FUTURE","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","CHECK_FOR_EXISTENCE_COMPLETED","CHUNK_APPENDED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","FRAGMENT_LOADING_COMPLETED","FRAGMENT_LOADING_STARTED","FRAGMENT_LOADING_ABANDONED","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_REQUESTED","INTERNAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","QUOTA_EXCEEDED","REPRESENTATION_UPDATED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_APPEND_COMPLETED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","STREAM_INITIALIZED","STREAM_TEARDOWN_COMPLETE","TIMED_TEXT_REQUESTED","TIME_SYNCHRONIZATION_COMPLETED","URL_RESOLUTION_FAILED","WALLCLOCK_TIME_UPDATED","XLINK_ALL_ELEMENTS_LOADED","XLINK_ELEMENT_LOADED","XLINK_READY","default","_CoreEvents2","Events","events","EventsBase","config","publicOnly","evt","indexOf","MediaPlayerEvents","BUFFER_EMPTY","BUFFER_LOADED","BUFFER_LEVEL_STATE_CHANGED","ERROR","LOG","MANIFEST_LOADED","METRICS_CHANGED","METRIC_CHANGED","METRIC_ADDED","METRIC_UPDATED","PERIOD_SWITCH_COMPLETED","PERIOD_SWITCH_STARTED","QUALITY_CHANGE_REQUESTED","QUALITY_CHANGE_RENDERED","TEXT_TRACKS_ADDED","TEXT_TRACK_ADDED","CAN_PLAY","PLAYBACK_ENDED","PLAYBACK_ERROR","PLAYBACK_NOT_ALLOWED","PLAYBACK_METADATA_LOADED","PLAYBACK_PAUSED","PLAYBACK_PLAYING","PLAYBACK_PROGRESS","PLAYBACK_RATE_CHANGED","PLAYBACK_SEEKED","PLAYBACK_SEEKING","PLAYBACK_STARTED","PLAYBACK_TIME_UPDATED","mediaPlayerEvents","createMetricsReporting","dvbErrorsTranslator","_DVBErrorsTranslator","eventBus","metricsModel","_MetricsCollectionController","getReportingFactory","_ReportingFactory","getMetricsHandlerFactory","_MetricsHandlerFactory","_MetricsReportingEvents","_FactoryMaker","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","metricsReportingEvents","MetricsCollectionController","update","error","controllersToRemove","Object","keys","metricsControllers","_ManifestParsing","dashManifestModel","getMetrics","manifest","m","key","JSON","stringify","splice","controller","_MetricsController","initialize","reset","trigger","setup","on","_Events","MetricsController","metricsEntry","rangeController","_RangeController","mediaElement","Range","reportingController","_ReportingController","log","Reporting","metricsHandlersController","_MetricsHandlersController","metrics","MetricsHandlersController","handle","handlers","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","metricsHandlerFactory","_MediaPlayerEvents","off","RangeController","rs","start","starttime","end","duration","ranges","add","useWallClockTime","_useWallClockTime","clear","_CustomTimeRanges","isEnabled","time","numRanges","Date","getTime","currentTime","ReportingController","reporting","some","reporter","reportingFactory","reporters","report","type","vos","MetricsHandlerFactory","listType","matches","match","keyRegex","knownFactoryProducts","concat","message","register","unregister","BufferLevel","_BufferLevelHandler","DVBErrors","_DVBErrorsHandler","HttpList","_HttpListHandler","PlayList","_GenericMetricHandler","RepSwitchList","TcpList","BufferLevelHandler","getLowestBufferLevelVO","storedVOs","map","reduce","b","level","intervalCallback","vo","lastReportedTime","basename","rc","n_ms","handlerHelpers","validateN","reconstructFullMetricName","interval","setInterval","clearInterval","_HandlerHelpers","DVBErrorsHandler","onInitialisationComplete","unused","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","ReportingFactory","entry","knownReportingSchemeIdUris","schemeIdUri","moduleName","urn:dvb:dash:reporting:2014","_DVBReporting","DVBReporting","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","pendingRequests","status","open","onloadend","onerror","send","Array","isArray","isReportingPlayer","metricSerialiser","serialise","USE_DRAFT_DVB_SPEC","reportingUrl","probability","reportingPlayerStatusDecided","randomNumberGenerator","random","allowPendingRequestsToCompleteOnReset","abort","_MetricSerialiser","_RNG","DVBErrorsTranslator","_DVBErrors","mpd","mpdurl","originalUrl","terror","metricModel","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","onPlaybackError","reason","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","HandlerHelpers","mn","isNaN","ManifestParsing","getMetricsRangeStartTime","dynamic","range","periods","reportingStartTime","getMpd","presentationStartTime","availabilityStartTime","getRegularPeriods","Metrics_asArray","metricEntry","_Metrics","isDynamic","getIsDynamic","Range_asArray","rangeEntry","_Range","getDuration","Reporting_asArray","reportingEntry","_Reporting","MetricSerialiser","pairs","v","isBuiltIn","prototype","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","randomNumbers","ArrayType","NUM_RANDOM_NUMBERS","getRandomValues","index","rand","min","max","MAX_VALUE","msCrypto","Uint32Array","pow","BYTES_PER_ELEMENT","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2"],"mappings":"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","file":"dash.reporting.min.js","sourceRoot":"./src/","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n */\nlet FactoryMaker = (function () {\n\n    let instance;\n    let extensions = [];\n    let singletonContexts = [];\n\n    function extend(name, childInstance, override, context) {\n        let extensionContext = getExtensionContext(context);\n        if (!extensionContext[name] && childInstance) {\n            extensionContext[name] = {instance: childInstance, override: override};\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (let i in singletonContexts) {\n            let obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({ name: className, context: context, instance: instance });\n    }\n\n    function getClassFactory(classConstructor) {\n        return function (context) {\n            if (context === undefined) {\n                context = {};\n            }\n            return {\n                create: function () {\n                    return merge(classConstructor.__dashjs_factory_name, classConstructor.apply({ context: context }, arguments), context, arguments);\n                }\n            };\n        };\n    }\n\n    function getSingletonFactory(classConstructor) {\n        return function (context) {\n            let instance;\n            if (context === undefined) {\n                context = {};\n            }\n            return {\n                getInstance: function () {\n                    // If we don't have an instance yet check for one on the context\n                    if (!instance) {\n                        instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                    }\n                    // If there's no instance on the context then create one\n                    if (!instance) {\n                        instance = merge(classConstructor.__dashjs_factory_name, classConstructor.apply({ context: context }, arguments), context, arguments);\n                        singletonContexts.push({ name: classConstructor.__dashjs_factory_name, context: context, instance: instance });\n                    }\n                    return instance;\n                }\n            };\n        };\n    }\n\n    function merge(name, classConstructor, context, args) {\n        let extensionContext = getExtensionContext(context);\n        let extensionObject = extensionContext[name];\n        if (extensionObject) {\n            let extension = extensionObject.instance;\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n                extension = extension.apply({ context: context, factory: instance, parent: classConstructor}, args);\n                for (const prop in extension) {\n                    if (classConstructor.hasOwnProperty(prop)) {\n                        classConstructor[prop] = extension[prop];\n                    }\n                }\n            } else { //replace parent object completely with new object. Same as dijon.\n                return extension.apply({ context: context, factory: instance}, args);\n            }\n        }\n        return classConstructor;\n    }\n\n    function getExtensionContext(context) {\n        let extensionContext;\n        extensions.forEach(function (obj) {\n            if (obj === context) {\n                extensionContext = obj;\n            }\n        });\n        if (!extensionContext) {\n            extensionContext = extensions.push(context);\n        }\n        return extensionContext;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        getSingletonFactory: getSingletonFactory,\n        getClassFactory: getClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.AST_IN_FUTURE = 'astinfuture';\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CHUNK_APPENDED = 'chunkAppended';\n        this.CURRENT_TRACK_CHANGED = 'currenttrackchanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted';\n        this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted';\n        this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_REQUESTED = 'initRequested';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATED = 'representationUpdated';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_APPEND_COMPLETED = 'sourceBufferAppendCompleted';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.STREAM_INITIALIZED = 'streaminitialized';\n        this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete';\n        this.TIMED_TEXT_REQUESTED = 'timedTextRequested';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ALL_ELEMENTS_LOADED = 'xlinkAllElementsLoaded';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n    }\n}\n\nexport default CoreEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nimport CoreEvents from './CoreEvents';\nclass Events extends CoreEvents {\n}\nlet events = new Events();\nexport default events;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass MediaPlayerEvents extends EventsBase {\n\n    /**\n     * @description Public facing external events to be used when developing a player that implements dash.js.\n     */\n    constructor () {\n        super();\n        /**\n         * Triggered when the video element's buffer state changes to stalled.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_EMPTY\n         */\n        this.BUFFER_EMPTY = 'bufferstalled';\n        /**\n         * Triggered when the video element's buffer state changes to loaded.\n         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).\n         * @event MediaPlayerEvents#BUFFER_LOADED\n         */\n        this.BUFFER_LOADED = 'bufferloaded';\n\n        /**\n         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.\n         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED\n         */\n        this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged';\n\n        /**\n         * Triggered when\n         * @event MediaPlayerEvents#ERROR\n         */\n        this.ERROR = 'error';\n        /**\n         * Triggered when {@link module:Debug} log method is called.\n         * @event MediaPlayerEvents#LOG\n         */\n        this.LOG = 'log';\n        //TODO refactor with internal event\n        /**\n         * Triggered when the manifest load is complete\n         * @event MediaPlayerEvents#MANIFEST_LOADED\n         */\n        this.MANIFEST_LOADED = 'manifestloaded';\n        /**\n         * Triggered anytime there is a change to the overall metrics.\n         * @event MediaPlayerEvents#METRICS_CHANGED\n         */\n        this.METRICS_CHANGED = 'metricschanged';\n        /**\n         * Triggered when an individual metric is added, updated or cleared.\n         * @event MediaPlayerEvents#METRIC_CHANGED\n         */\n        this.METRIC_CHANGED = 'metricchanged';\n        /**\n         * Triggered every time a new metric is added.\n         * @event MediaPlayerEvents#METRIC_ADDED\n         */\n        this.METRIC_ADDED = 'metricadded';\n        /**\n         * Triggered every time a metric is updated.\n         * @event MediaPlayerEvents#METRIC_UPDATED\n         */\n        this.METRIC_UPDATED = 'metricupdated';\n        /**\n         * Triggered at the stream end of a period.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED\n         */\n        this.PERIOD_SWITCH_COMPLETED = 'streamswitchcompleted';\n        /**\n         * Triggered when a new period starts.\n         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED\n         */\n        this.PERIOD_SWITCH_STARTED = 'streamswitchstarted';\n\n        /**\n         * Triggered when an ABR up /down switch is initialed; either by user in manual mode or auto mode via ABR rules.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED\n         */\n        this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested';\n\n        /**\n         * Triggered when the new ABR quality is being rendered on-screen.\n         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED\n         */\n        this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered';\n\n        /**\n         * Triggered when the stream is setup and ready.\n         * @event MediaPlayerEvents#STREAM_INITIALIZED\n         */\n        this.STREAM_INITIALIZED = 'streaminitialized';\n        /**\n         * Triggered once all text tracks detected in the MPD are added to the video element.\n         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED\n         */\n        this.TEXT_TRACKS_ADDED = 'alltexttracksadded';\n        /**\n         * Triggered when a text track is added to the video element's TextTrackList\n         * @event MediaPlayerEvents#TEXT_TRACK_ADDED\n         */\n        this.TEXT_TRACK_ADDED = 'texttrackadded';\n\n        /**\n         * Sent when enough data is available that the media can be played,\n         * at least for a couple of frames.  This corresponds to the\n         * HAVE_ENOUGH_DATA readyState.\n         * @event MediaPlayerEvents#CAN_PLAY\n         */\n        this.CAN_PLAY = 'canPlay';\n\n        /**\n         * Sent when playback completes.\n         * @event MediaPlayerEvents#PLAYBACK_ENDED\n         */\n        this.PLAYBACK_ENDED = 'playbackEnded';\n\n        /**\n         * Sent when an error occurs.  The element's error\n         * attribute contains more information.\n         * @event MediaPlayerEvents#PLAYBACK_ERROR\n         */\n        this.PLAYBACK_ERROR = 'playbackError';\n        /**\n         * Sent when playback is not allowed (for example if user gesture is needed).\n         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED\n         */\n        this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed';\n        /**\n         * The media's metadata has finished loading; all attributes now\n         * contain as much useful information as they're going to.\n         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED\n         */\n        this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded';\n        /**\n         * Sent when playback is paused.\n         * @event MediaPlayerEvents#PLAYBACK_PAUSED\n         */\n        this.PLAYBACK_PAUSED = 'playbackPaused';\n        /**\n         * Sent when the media begins to play (either for the first time, after having been paused,\n         * or after ending and then restarting).\n         *\n         * @event MediaPlayerEvents#PLAYBACK_PLAYING\n         */\n        this.PLAYBACK_PLAYING = 'playbackPlaying';\n        /**\n         * Sent periodically to inform interested parties of progress downloading\n         * the media. Information about the current amount of the media that has\n         * been downloaded is available in the media element's buffered attribute.\n         * @event MediaPlayerEvents#PLAYBACK_PROGRESS\n         */\n        this.PLAYBACK_PROGRESS = 'playbackProgress';\n        /**\n         * Sent when the playback speed changes.\n         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED\n         */\n        this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged';\n        /**\n         * Sent when a seek operation completes.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKED\n         */\n        this.PLAYBACK_SEEKED = 'playbackSeeked';\n        /**\n         * Sent when a seek operation begins.\n         * @event MediaPlayerEvents#PLAYBACK_SEEKING\n         */\n        this.PLAYBACK_SEEKING = 'playbackSeeking';\n        /**\n         * Sent when playback of the media starts after having been paused;\n         * that is, when playback is resumed after a prior pause event.\n         *\n         * @event MediaPlayerEvents#PLAYBACK_STARTED\n         */\n        this.PLAYBACK_STARTED = 'playbackStarted';\n        /**\n         * The time indicated by the element's currentTime attribute has changed.\n         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED\n         */\n        this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated';\n    }\n}\n\nlet mediaPlayerEvents = new MediaPlayerEvents();\nexport default mediaPlayerEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance;\n\n    let dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel,\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nlet factory = FactoryMaker.getClassFactory(MetricsReporting);\nfactory.events = MetricsReportingEvents;\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n\nclass MetricsReportingEvents extends EventsBase {\n    constructor () {\n        super();\n\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\n    }\n}\n\nlet metricsReportingEvents = new MetricsReportingEvents();\nexport default metricsReportingEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\nimport Events from '../../../core/events/Events';\n\nfunction MetricsCollectionController(config) {\n\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    var controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function reset() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n\n\n        eventBus.on(Events.MANIFEST_UPDATED, update);\n        eventBus.on(Events.STREAM_TEARDOWN_COMPLETE, reset);\n    }\n\n    setup();\n\n    // don't export any actual methods\n    return {};\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default FactoryMaker.getClassFactory(MetricsCollectionController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport RangeController from './RangeController';\nimport ReportingController from './ReportingController';\nimport MetricsHandlersController from './MetricsHandlersController';\n\nfunction MetricsController(config) {\n\n    let metricsHandlersController,\n        reportingController,\n        rangeController,\n        instance;\n\n    let context = this.context;\n\n    function initialize(metricsEntry) {\n        try {\n            rangeController = RangeController(context).create({\n                mediaElement: config.mediaElement\n            });\n\n            rangeController.initialize(metricsEntry.Range);\n\n            reportingController = ReportingController(context).create({\n                log: config.log\n            });\n\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\n\n            metricsHandlersController = MetricsHandlersController(context).create({\n                log: config.log,\n                eventBus: config.eventBus,\n            });\n\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\n        } catch (e) {\n            reset();\n            throw e;\n        }\n    }\n\n    function reset() {\n        if (metricsHandlersController) {\n            metricsHandlersController.reset();\n        }\n\n        if (reportingController) {\n            reportingController.reset();\n        }\n\n        if (rangeController) {\n            rangeController.reset();\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsController.__dashjs_factory_name = 'MetricsController';\nexport default FactoryMaker.getClassFactory(MetricsController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\n\nfunction MetricsHandlersController(config) {\n    let handlers = [];\n\n    let instance;\n    let context = this.context;\n    let eventBus = config.eventBus;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        log: config.log,\n        eventBus: config.eventBus\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                var handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            MediaPlayerEvents.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            MediaPlayerEvents.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            MediaPlayerEvents.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            MediaPlayerEvents.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default FactoryMaker.getClassFactory(MetricsHandlersController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                var start = r.starttime;\n                var end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        var numRanges = ranges.length;\n        var time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (var i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default FactoryMaker.getClassFactory(RangeController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport ReportingFactory from '../reporting/ReportingFactory';\n\nfunction ReportingController(config) {\n\n    let reporters = [];\n    let instance;\n\n    let reportingFactory = ReportingFactory(this.context).getInstance({\n        log: config.log\n    });\n\n    function initialize(reporting, rangeController) {\n        // \"if multiple Reporting elements are present, it is expected that\n        // the client processes one of the recognized reporting schemes.\"\n        // to ignore this, and support multiple Reporting per Metric,\n        // simply change the 'some' below to 'forEach'\n        reporting.some(r => {\n            var reporter = reportingFactory.create(r, rangeController);\n\n            if (reporter) {\n                reporters.push(reporter);\n                return true;\n            }\n        });\n    }\n\n    function reset() {\n        reporters.forEach(r => r.reset());\n        reporters = [];\n    }\n\n    function report(type, vos) {\n        reporters.forEach(r => r.report(type, vos));\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        report:     report\n    };\n\n    return instance;\n}\n\nReportingController.__dashjs_factory_name = 'ReportingController';\nexport default FactoryMaker.getClassFactory(ReportingController);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    let instance;\n    let log = config.log;\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    let context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n\n            log(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default FactoryMaker.getSingletonFactory(MetricsHandlerFactory);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler() {\n\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        var vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === 'BufferLevel') {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default FactoryMaker.getClassFactory(BufferLevelHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\n        );\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === 'DVBErrors') {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default FactoryMaker.getClassFactory(DVBErrorsHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../../core/FactoryMaker';\n\nfunction GenericMetricHandler() {\n\n    let instance,\n        metricName,\n        reportingController;\n\n    function initialize(name, rc) {\n        metricName = name;\n        reportingController = rc;\n    }\n\n    function reset() {\n        reportingController = null;\n        metricName = undefined;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricName) {\n            if (reportingController) {\n                reportingController.report(metricName, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\nexport default FactoryMaker.getClassFactory(GenericMetricHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler() {\n\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === 'HttpList') {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default FactoryMaker.getClassFactory(HttpListHandler);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport DVBReporting from './reporters/DVBReporting';\n\nfunction ReportingFactory(config) {\n\n    let knownReportingSchemeIdUris = {\n        'urn:dvb:dash:reporting:2014': DVBReporting\n    };\n\n    let context = this.context;\n    let log = config.log;\n    let instance;\n\n    function create(entry, rangeController) {\n        var reporting;\n\n        try {\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create();\n\n            reporting.initialize(entry, rangeController);\n        } catch (e) {\n            reporting = null;\n\n            log(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\n        }\n\n        return reporting;\n    }\n\n    function register(schemeIdUri, moduleName) {\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\n    }\n\n    function unregister(schemeIdUri) {\n        delete knownReportingSchemeIdUris[schemeIdUri];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\nexport default FactoryMaker.getSingletonFactory(ReportingFactory);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../../core/FactoryMaker';\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting() {\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser = MetricSerialiser(context).getInstance();\n    let randomNumberGenerator = RNG(context).getInstance();\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let isReportingPlayer = false;\n    let reportingPlayerStatusDecided = false;\n    let reportingUrl = null;\n    let rangeController = null;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    function doGetRequest(url, successCB, failureCB) {\n        var req = new XMLHttpRequest();\n        var oncomplete = function () {\n            var reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                var url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== 'DVBErrors')) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        var probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry['dvb:reportingUrl'];\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            // NOTE: DVB spec has a typo where it incorrectly references the\n            // priority attribute, which should be probability\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default FactoryMaker.getClassFactory(DVBReporting);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport Events from '../../../core/events/Events';\nimport MediaPlayerEvents from '../../MediaPlayerEvents';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBErrorsTranslator(config) {\n\n    let instance;\n    let eventBus = config.eventBus;\n    let metricModel = config.metricsModel;\n    let mpd;\n\n    function report(vo) {\n        var o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        metricModel.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case 'HttpList':\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        var reason = e.error ? e.error.code : 0;\n        var errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(MediaPlayerEvents.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(MediaPlayerEvents.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default FactoryMaker.getSingletonFactory(DVBErrorsTranslator);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction HandlerHelpers() {\n    return {\n        reconstructFullMetricName: function (key, n, type) {\n            var mn = key;\n\n            if (n) {\n                mn += '(' + n;\n\n                if (type && type.length) {\n                    mn += ',' + type;\n                }\n\n                mn += ')';\n            }\n\n            return mn;\n        },\n\n        validateN: function (n_ms) {\n            if (!n_ms) {\n                throw new Error('missing n');\n            }\n\n            if (isNaN(n_ms)) {\n                throw new Error('n is NaN');\n            }\n\n            // n is a positive integer is defined to refer to the metric\n            // in which the buffer level is recorded every n ms.\n            if (n_ms < 0) {\n                throw new Error('n must be positive');\n            }\n\n            return n_ms;\n        }\n    };\n}\n\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\nexport default FactoryMaker.getSingletonFactory(HandlerHelpers);\n","import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction ManifestParsing (config) {\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var periods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            periods = this.getRegularPeriods(manifest, mpd);\n\n            if (periods.length) {\n                presentationStartTime = periods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty('starttime')) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    //console.log(\"Invalid Metrics. metrics must be set. Ignoring.\");\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty('schemeIdUri')) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default FactoryMaker.getSingletonFactory(ManifestParsing);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        var pairs = [];\n        var obj = [];\n        var key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        var isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = encodeURIComponent(obj.join(','));\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default FactoryMaker.getSingletonFactory(MetricSerialiser);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction RNG() {\n\n    // check whether secure random numbers are available. if not, revert to\n    // using Math.random\n    let crypto = window.crypto || window.msCrypto;\n\n    // could just as easily use any other array type by changing line below\n    let ArrayType = Uint32Array;\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\n\n    // currently there is only one client for this code, and that only uses\n    // a single random number per initialisation. may want to increase this\n    // number if more consumers in the future\n    let NUM_RANDOM_NUMBERS = 10;\n\n    let randomNumbers,\n        index,\n        instance;\n\n    function initialise() {\n        if (crypto) {\n            if (!randomNumbers) {\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n            }\n            crypto.getRandomValues(randomNumbers);\n            index = 0;\n        }\n    }\n\n    function rand(min, max) {\n        var r;\n\n        if (!min) {\n            min = 0;\n        }\n\n        if (!max) {\n            max = 1;\n        }\n\n        if (crypto) {\n            if (index === randomNumbers.length) {\n                initialise();\n            }\n\n            r = randomNumbers[index] / MAX_VALUE;\n            index += 1;\n        } else {\n            r = Math.random();\n        }\n\n        return (r * (max - min)) + min;\n    }\n\n    instance = {\n        random: rand,\n    };\n\n    initialise();\n\n    return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexport default FactoryMaker.getSingletonFactory(RNG);\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass DVBErrors {\n    constructor() {\n        this.mpdurl = null;\n        // String - Absolute URL from which the MPD was originally\n        // retrieved (MPD updates will not change this value).\n\n        this.errorcode = null;\n        // String - The value of errorcode depends upon the type\n        // of error being reported. For an error listed in the\n        // ErrorType column below the value is as described in the\n        // Value column.\n        //\n        // ErrorType                                            Value\n        // ---------                                            -----\n        // HTTP error status code                               HTTP status code\n        // Unknown HTTP status code                             HTTP status code\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\n        // DNS resolution failed                                \"C00\"\n        // Host unreachable                                     \"C01\"\n        // Connection refused                                   \"C02\"\n        // Connection error – Not otherwise specified           \"C03\"\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\n        // Corrupt media – Not otherwise specified              \"M01\"\n        // Changing Base URL in use due to errors               \"F00\"\n        // Becoming an error reporting Player                   \"S00\"\n\n        this.terror = null;\n        // Real-Time - Date and time at which error occurred in UTC,\n        // formatted as a combined date and time according to ISO 8601.\n\n        this.url = null;\n        // String - Absolute URL from which data was being requested\n        // when this error occurred. If the error report is in relation\n        // to corrupt media or changing BaseURL, this may be a null\n        // string if the URL from which the media was obtained or\n        // which led to the change of BaseURL is no longer known.\n\n        this.ipaddress = null;\n        // String - IP Address which the host name in \"url\" resolved to.\n        // If the error report is in relation to corrupt media or\n        // changing BaseURL, this may be a null string if the URL\n        // from which the media was obtained or which led to the\n        // change of BaseURL is no longer known.\n\n        this.servicelocation = null;\n        // String - The value of the serviceLocation field in the\n        // BaseURL being used. In the event of this report indicating\n        // a change of BaseURL this is the value from the BaseURL\n        // being moved from.\n    }\n}\n\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\nDVBErrors.HOST_UNREACHABLE =             'C01';\nDVBErrors.CONNECTION_REFUSED =           'C02';\nDVBErrors.CONNECTION_ERROR =             'C03';\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\nDVBErrors.BASE_URL_CHANGED =             'F00';\nDVBErrors.BECAME_REPORTER =              'S00';\n\nexport default DVBErrors;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Metrics {\n    constructor() {\n\n        this.metrics = '';\n        this.Range = [];\n        this.Reporting = [];\n    }\n}\n\nexport default Metrics;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Range {\n    constructor() {\n\n        // as defined in ISO23009-1\n        this.starttime = 0;\n        this.duration = Infinity;\n\n        // for internal use\n        this._useWallClockTime = false;\n    }\n}\n\nexport default Range;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass Reporting {\n    constructor() {\n        // Reporting is a DescriptorType and doesn't have any additional fields\n        this.schemeIdUri = '';\n        this.value = '';\n    }\n}\n\nexport default Reporting;\n","/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction CustomTimeRanges(/*config*/) {\n    let customTimeRangeArray = [];\n    let length = 0;\n\n    function add(start, end) {\n        var i = 0;\n\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\n\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\n\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\n            if (this.mergeRanges(i,i + 1)) {\n                i--;\n            }\n        }\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function clear() {\n        this.customTimeRangeArray = [];\n        this.length = 0;\n    }\n\n    function remove(start, end) {\n        for (var i = 0; i < this.customTimeRangeArray.length; i++) {\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\n                //      |--------------Range i-------|\n                //|---------------Range to remove ---------------|\n                //    or\n                //|--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                //    or\n                //                 |--------------Range i-------|\n                //|--------------Range to remove ---------------|\n                this.customTimeRangeArray.splice(i,1);\n                i--;\n\n            }else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //|-----------------Range i----------------|\n                //        |-------Range to remove -----|\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\n                this.customTimeRangeArray[i].end = start;\n                break;\n            }else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\n                //|-----------Range i----------|\n                //                    |---------Range to remove --------|\n                //    or\n                //|-----------------Range i----------------|\n                //            |-------Range to remove -----|\n                this.customTimeRangeArray[i].end = start;\n            }else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\n                //                     |-----------Range i----------|\n                //|---------Range to remove --------|\n                //            or\n                //|-----------------Range i----------------|\n                //|-------Range to remove -----|\n                this.customTimeRangeArray[i].start = end;\n            }\n        }\n\n        this.length = this.customTimeRangeArray.length;\n    }\n\n    function mergeRanges(rangeIndex1, rangeIndex2) {\n        var range1 = this.customTimeRangeArray[rangeIndex1];\n        var range2 = this.customTimeRangeArray[rangeIndex2];\n\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\n            //|-----------Range1----------|\n            //                    |-----------Range2----------|\n            range1.end = range2.end;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\n            //                |-----------Range1----------|\n            //|-----------Range2----------|\n            range1.start = range2.start;\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\n            //      |--------Range1-------|\n            //|---------------Range2--------------|\n            this.customTimeRangeArray.splice(rangeIndex1,1);\n            return true;\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\n            //|-----------------Range1--------------|\n            //        |-----------Range2----------|\n            this.customTimeRangeArray.splice(rangeIndex2,1);\n            return true;\n        }\n        return false;\n    }\n\n    function start(index) {\n        return this.customTimeRangeArray[index].start;\n    }\n\n    function end(index) {\n        return this.customTimeRangeArray[index].end;\n    }\n\n    return {\n        customTimeRangeArray: customTimeRangeArray,\n        length: length,\n        add: add,\n        clear: clear,\n        remove: remove,\n        mergeRanges: mergeRanges,\n        start: start,\n        end: end\n    };\n}\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\n"]}